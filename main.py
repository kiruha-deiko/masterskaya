from fastapi import FastAPI, UploadFile, File
from fastapi.responses import JSONResponse
import pandas as pd
from pydantic import BaseModel
import joblib
from typing import List
from sklearn.preprocessing import LabelEncoder, StandardScaler

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–Ω—è—Ç–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
app = FastAPI(
    title="üíì Heart Attack Risk Predictor",
    description="–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ä–∏—Å–∫–∞ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—É–ø–∞.",
    version="1.0.0"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –º–æ–¥–µ–ª–∏
model = joblib.load("model_rf.pkl")
scaler = joblib.load("scaler.pkl")
label_encoder = joblib.load("label_encoder_gender.pkl")

# –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
class PredictionResponse(BaseModel):
    id: int
    prediction: int

@app.post("/predict", response_model=List[PredictionResponse], summary="üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ CSV", tags=["–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"])
async def predict(file: UploadFile = File(..., description="CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É 'id')")):
    try:
        df = pd.read_csv(file.file)

        if "Unnamed: 0" in df.columns:
            df.drop(columns=["Unnamed: 0"], inplace=True)

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        binary_features = [
            "Diabetes", "Family History", "Smoking", "Obesity",
            "Previous Heart Problems", "Medication Use"
        ]
        for col in binary_features:
            df[col].fillna(0, inplace=True)

        df["Alcohol Consumption"].fillna(df["Alcohol Consumption"].median(), inplace=True)
        df["Stress Level"].fillna(df["Stress Level"].median(), inplace=True)
        df["Physical Activity Days Per Week"].fillna(df["Physical Activity Days Per Week"].mode()[0], inplace=True)

        df["Gender"] = label_encoder.transform(df["Gender"])

        features = df.drop(columns=["id"])
        features_scaled = scaler.transform(features)

        preds = model.predict(features_scaled)

        return [PredictionResponse(id=row_id, prediction=int(pred)) for row_id, pred in zip(df["id"], preds)]

    except Exception as e:
        return JSONResponse(status_code=400, content={"error": str(e)})